/***************************************************************************************************
 * Copyright (c) 2014, Lukas Tenbrink.
 * http://lukas.axxim.net
 **************************************************************************************************/

// Date: 30-3-2013 20:28:20
// Template version 1.1
// Java generated by Techne
// Keep in mind that you still need to fill in some blanks
// - ZeuX

package ivorius.yegamolchattels.client.rendering;

import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.entity.Entity;
import net.minecraft.util.MathHelper;

public class ModelGrandfatherClock extends ModelBase
{
    //fields
    ModelRenderer base;
    ModelRenderer basepilar1;
    ModelRenderer basepilar2;
    ModelRenderer basepilar3;
    ModelRenderer basepilar4;
    ModelRenderer pole1;
    ModelRenderer pole2;
    ModelRenderer pole3;
    ModelRenderer pole4;
    ModelRenderer frontdetail1;
    ModelRenderer backdetail1;
    ModelRenderer frontdetail2;
    ModelRenderer frontdetail3;
    ModelRenderer backdetail2;
    ModelRenderer backdetail3;
    ModelRenderer frontdetail4;
    ModelRenderer frontdetail5;
    ModelRenderer backdetail4;
    ModelRenderer backdetail5;
    ModelRenderer right;
    ModelRenderer left;
    ModelRenderer clock;
    ModelRenderer clocktop;
    ModelRenderer clockbottom;
    ModelRenderer pendulum1;
    ModelRenderer pendulum2;
    ModelRenderer phase;
    ModelRenderer arm;
    ModelRenderer armconnect;

    public ModelGrandfatherClock()
    {
        textureWidth = 128;
        textureHeight = 64;

        base = new ModelRenderer(this, 0, 0);
        base.addBox(-6F, 0F, -6F, 12, 6, 12);
        base.setRotationPoint(0F, 18F, 0F);
        base.setTextureSize(128, 64);
        base.mirror = true;
        setRotation(base, 0F, 0F, 0F);
        basepilar1 = new ModelRenderer(this, 49, 0);
        basepilar1.addBox(-8F, -1F, -8F, 3, 7, 3);
        basepilar1.setRotationPoint(0F, 18F, 0F);
        basepilar1.setTextureSize(128, 64);
        basepilar1.mirror = true;
        setRotation(basepilar1, 0F, 0F, 0F);
        basepilar2 = new ModelRenderer(this, 62, 0);
        basepilar2.addBox(5F, -1F, -8F, 3, 7, 3);
        basepilar2.setRotationPoint(0F, 18F, 0F);
        basepilar2.setTextureSize(128, 64);
        basepilar2.mirror = true;
        setRotation(basepilar2, 0F, 0F, 0F);
        basepilar3 = new ModelRenderer(this, 75, 0);
        basepilar3.addBox(5F, -1F, 5F, 3, 7, 3);
        basepilar3.setRotationPoint(0F, 18F, 0F);
        basepilar3.setTextureSize(128, 64);
        basepilar3.mirror = true;
        setRotation(basepilar3, 0F, 0F, 0F);
        basepilar4 = new ModelRenderer(this, 88, 0);
        basepilar4.addBox(-8F, -1F, 5F, 3, 7, 3);
        basepilar4.setRotationPoint(0F, 18F, 0F);
        basepilar4.setTextureSize(128, 64);
        basepilar4.mirror = true;
        setRotation(basepilar4, 0F, 0F, 0F);
        pole1 = new ModelRenderer(this, 0, 19);
        pole1.addBox(-5F, -18F, -5F, 2, 18, 3);
        pole1.setRotationPoint(0F, 18F, 0F);
        pole1.setTextureSize(128, 64);
        pole1.mirror = true;
        setRotation(pole1, 0F, 0F, 0F);
        pole2 = new ModelRenderer(this, 11, 19);
        pole2.addBox(3F, -18F, -5F, 2, 18, 3);
        pole2.setRotationPoint(0F, 18F, 0F);
        pole2.setTextureSize(128, 64);
        pole2.mirror = true;
        setRotation(pole2, 0F, 0F, 0F);
        pole3 = new ModelRenderer(this, 22, 19);
        pole3.addBox(3F, -18F, 2F, 2, 18, 3);
        pole3.setRotationPoint(0F, 18F, 0F);
        pole3.setTextureSize(128, 64);
        pole3.mirror = true;
        setRotation(pole3, 0F, 0F, 0F);
        pole4 = new ModelRenderer(this, 33, 19);
        pole4.addBox(-5F, -18F, 2F, 2, 18, 3);
        pole4.setRotationPoint(0F, 18F, 0F);
        pole4.setTextureSize(128, 64);
        pole4.mirror = true;
        setRotation(pole4, 0F, 0F, 0F);
        frontdetail1 = new ModelRenderer(this, 44, 19);
        frontdetail1.addBox(-3F, -18F, -5F, 6, 2, 2);
        frontdetail1.setRotationPoint(0F, 18F, 0F);
        frontdetail1.setTextureSize(128, 64);
        frontdetail1.mirror = true;
        setRotation(frontdetail1, 0F, 0F, 0F);
        backdetail1 = new ModelRenderer(this, 44, 24);
        backdetail1.addBox(-3F, -18F, 3F, 6, 2, 2);
        backdetail1.setRotationPoint(0F, 18F, 0F);
        backdetail1.setTextureSize(128, 64);
        backdetail1.mirror = true;
        setRotation(backdetail1, 0F, 0F, 0F);
        frontdetail2 = new ModelRenderer(this, 61, 19);
        frontdetail2.addBox(1F, -16F, -5F, 2, 1, 2);
        frontdetail2.setRotationPoint(0F, 18F, 0F);
        frontdetail2.setTextureSize(128, 64);
        frontdetail2.mirror = true;
        setRotation(frontdetail2, 0F, 0F, 0F);
        frontdetail3 = new ModelRenderer(this, 70, 19);
        frontdetail3.addBox(-3F, -16F, -5F, 2, 1, 2);
        frontdetail3.setRotationPoint(0F, 18F, 0F);
        frontdetail3.setTextureSize(128, 64);
        frontdetail3.mirror = true;
        setRotation(frontdetail3, 0F, 0F, 0F);
        backdetail2 = new ModelRenderer(this, 61, 24);
        backdetail2.addBox(-3F, -16F, 3F, 2, 1, 2);
        backdetail2.setRotationPoint(0F, 18F, 0F);
        backdetail2.setTextureSize(128, 64);
        backdetail2.mirror = true;
        setRotation(backdetail2, 0F, 0F, 0F);
        backdetail3 = new ModelRenderer(this, 70, 24);
        backdetail3.addBox(1F, -16F, 3F, 2, 1, 2);
        backdetail3.setRotationPoint(0F, 18F, 0F);
        backdetail3.setTextureSize(128, 64);
        backdetail3.mirror = true;
        setRotation(backdetail3, 0F, 0F, 0F);
        frontdetail4 = new ModelRenderer(this, 79, 19);
        frontdetail4.addBox(2F, -15F, -5F, 1, 2, 2);
        frontdetail4.setRotationPoint(0F, 18F, 0F);
        frontdetail4.setTextureSize(128, 64);
        frontdetail4.mirror = true;
        setRotation(frontdetail4, 0F, 0F, 0F);
        frontdetail5 = new ModelRenderer(this, 86, 19);
        frontdetail5.addBox(-3F, -15F, -5F, 1, 2, 2);
        frontdetail5.setRotationPoint(0F, 18F, 0F);
        frontdetail5.setTextureSize(128, 64);
        frontdetail5.mirror = true;
        setRotation(frontdetail5, 0F, 0F, 0F);
        backdetail4 = new ModelRenderer(this, 79, 24);
        backdetail4.addBox(2F, -15F, 3F, 1, 2, 2);
        backdetail4.setRotationPoint(0F, 18F, 0F);
        backdetail4.setTextureSize(128, 64);
        backdetail4.mirror = true;
        setRotation(backdetail4, 0F, 0F, 0F);
        backdetail5 = new ModelRenderer(this, 86, 24);
        backdetail5.addBox(-3F, -15F, 3F, 1, 2, 2);
        backdetail5.setRotationPoint(0F, 18F, 0F);
        backdetail5.setTextureSize(128, 64);
        backdetail5.mirror = true;
        setRotation(backdetail5, 0F, 0F, 0F);
        right = new ModelRenderer(this, 44, 29);
        right.addBox(-5F, -18F, -2F, 2, 4, 4);
        right.setRotationPoint(0F, 18F, 0F);
        right.setTextureSize(128, 64);
        right.mirror = true;
        setRotation(right, 0F, 0F, 0F);
        left = new ModelRenderer(this, 57, 29);
        left.addBox(3F, -18F, -2F, 2, 4, 4);
        left.setRotationPoint(0F, 18F, 0F);
        left.setTextureSize(128, 64);
        left.mirror = true;
        setRotation(left, 0F, 0F, 0F);
        clock = new ModelRenderer(this, 0, 41);
        clock.addBox(-5F, -29F, -5F, 10, 9, 10);
        clock.setRotationPoint(0F, 19F, 0F);
        clock.setTextureSize(128, 64);
        clock.mirror = true;
        setRotation(clock, 0F, 0F, 0F);
        clocktop = new ModelRenderer(this, 41, 41);
        clocktop.addBox(-6F, -30F, -6F, 12, 2, 12);
        clocktop.setRotationPoint(0F, 18F, 0F);
        clocktop.setTextureSize(128, 64);
        clocktop.mirror = true;
        setRotation(clocktop, 0F, 0F, 0F);
        clockbottom = new ModelRenderer(this, 41, 50);
        clockbottom.addBox(-6F, -19F, -6F, 12, 2, 12);
        clockbottom.setRotationPoint(0F, 18F, 0F);
        clockbottom.setTextureSize(128, 64);
        clockbottom.mirror = true;
        setRotation(clockbottom, 0F, 0F, 0F);
        pendulum1 = new ModelRenderer(this, 90, 41);
        pendulum1.addBox(-1F, 0F, -0.5F, 2, 13, 1);
        pendulum1.setRotationPoint(0F, 1F, 0F);
        pendulum1.setTextureSize(128, 64);
        pendulum1.mirror = true;
        setRotation(pendulum1, 0F, 0F, 0F);
        pendulum2 = new ModelRenderer(this, 97, 41);
        pendulum2.addBox(-1.5F, 11F, -1F, 3, 1, 2);
        pendulum2.setRotationPoint(0F, 1F, 0F);
        pendulum2.setTextureSize(128, 64);
        pendulum2.mirror = true;
        setRotation(pendulum2, 0F, 0F, 0F);
        phase = new ModelRenderer(this, 0, 3);
        phase.addBox(-1F, -2F, -5.2F, 2, 2, 0);
        phase.setRotationPoint(0F, -2F, 0.1F);
        phase.setTextureSize(128, 64);
        phase.mirror = true;
        setRotation(phase, 0F, 0F, 0F);
        arm = new ModelRenderer(this, 110, 0);
        arm.addBox(-4.5F, -4.5F, -0.151F, 9, 9, 0);
        arm.setRotationPoint(0F, -5.5F, -5F);
        arm.setTextureSize(128, 64);
        arm.mirror = true;
        setRotation(arm, 0F, 0F, 0F);
        armconnect = new ModelRenderer(this, 0, 0);
        armconnect.addBox(-0.5F, -0.5F, -0.15F, 1, 1, 1);
        armconnect.setRotationPoint(0F, -5.5F, -5F);
        armconnect.setTextureSize(128, 64);
        armconnect.mirror = true;
        setRotation(armconnect, 0F, 0F, 0F);
    }

    @Override
    public void render(Entity entity, float f, float f1, float f2, float f3, float f4, float f5)
    {
        super.render(entity, f, f1, f2, f3, f4, f5);
        setRotationAngles(f, f1, f2, f3, f4, f5, entity);
        base.render(f5);
        basepilar1.render(f5);
        basepilar2.render(f5);
        basepilar3.render(f5);
        basepilar4.render(f5);
        pole1.render(f5);
        pole2.render(f5);
        pole3.render(f5);
        pole4.render(f5);
        frontdetail1.render(f5);
        backdetail1.render(f5);
        frontdetail2.render(f5);
        frontdetail3.render(f5);
        backdetail2.render(f5);
        backdetail3.render(f5);
        frontdetail4.render(f5);
        frontdetail5.render(f5);
        backdetail4.render(f5);
        backdetail5.render(f5);
        right.render(f5);
        left.render(f5);
        clock.render(f5);
        clocktop.render(f5);
        clockbottom.render(f5);
        pendulum1.render(f5);
        pendulum2.render(f5);
        phase.render(f5);
        arm.render(f5);
        armconnect.render(f5);
    }

    private void setRotation(ModelRenderer model, float x, float y, float z)
    {
        model.rotateAngleX = x;
        model.rotateAngleY = y;
        model.rotateAngleZ = z;
    }

    @Override
    public void setRotationAngles(float par1, float par2, float par3, float par4, float par5, float par6, Entity par7Entity)
    {
        super.setRotationAngles(par1, par2, par3, par4, par5, par6, par7Entity);

        pendulum1.rotateAngleZ = MathHelper.sin(par7Entity.ticksExisted / 400.0f * 3.141f) * 0.3141f;
        pendulum2.rotateAngleZ = MathHelper.sin(par7Entity.ticksExisted / 400.0f * 3.141f) * 0.3141f;

        long time = par7Entity.timeUntilPortal;

        arm.rotateAngleZ = ((time - 6000L) / 24000f) * 3.141f * 2.0f;

        float moonPhase = (time / 24000f) % 8.0f;
        phase.rotateAngleY = 3.141f * (-0.13f + 0.26f * moonPhase / 9.0f);
    }
}
